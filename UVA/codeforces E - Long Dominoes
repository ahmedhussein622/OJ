

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <map>
#include <tuple>
#include <iostream>

using namespace std;
int n,m;

map<tuple<short,short,short>, long long> dp;

 long long solve(short row, short cr, short nr);

 long long generateRow(short row, short cc, short cr, short nr, short nnr) {

    //printf("generating %d %d %d %d %d\n",row,cc,cr,nr,nnr);
    if(cc == m) {

        return  solve(row+1,nr,nnr);
    }


     long long ans = 0;
    if((1 & (cr >> cc)) == 0) {

        if(m-cc >= 3 && (1 & (cr >> (cc+1))) != 1 && (1 & (cr >> (cc+2))) != 1) {
            int ccr = cr | (1 << (cc+1)) | (1 << (cc+2)) | (1 << cc);
            ans += generateRow(row, cc+3, ccr,nr, nnr);
        }

        if(n-row >= 3)
            ans += generateRow(row,cc+1,cr |(1 << cc), nr |(1 << cc), nnr | (1<<cc));
    }

    else {
        ans += generateRow(row,cc+1,cr,nr,nnr);
    }

    return ans;

}



 long long solve(short row, short cr, short nr) {

    tuple<short,short,short>a(row, cr, nr);
    if(dp.find(a) != dp.end()) {
        return dp[a];
    }

     long long ans = 0;

    if(row == n) {
        dp[a] = 1;
        return 1;
    }

    else {
        ans = generateRow(row, 0, cr, nr, 0);
    }


    dp[a] = ans;
    return ans;

}


int main() {

    freopen("dominoes.in","r",stdin);
    freopen("dominoes.out","w",stdout);

    scanf("%d %d",&m,&n);


    long long ans = 0;
    ans = solve(0, 0, 0);

    cout<<ans<<endl;

    return 0;
}





