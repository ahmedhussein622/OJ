

#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <queue>
#include <tuple>
#define Infinity 999999999


using namespace std;

int r = 10;
int c,x;
int graph[15][1010];
long dist[15][1010];

struct compare {

    bool operator()(tuple<int,int,long> a, tuple<int,int,long> b) {
        return get<2>(a) > get<2>(b);
    }


};

long dijkstra() {

    int i,j;
    for(i = 0;i < r; i++) {
        for(j = 0;j <= c; j++)
            dist[i][j] = Infinity;
    }
    dist[0][0] = 0;

    priority_queue<tuple<int,int,long>, vector<tuple<int,int,long> >, compare> q;



    tuple<int,int,long> tt(0,0,0);
    q.push(tt);


    int cr,cc,nr,nc;
    long cd,nd;


    while(!q.empty() && dist[0][c] == Infinity) {
        tuple<int,int,long> n = q.top();
        q.pop();
        cr = get<0>(n);
        cc = get<1>(n);
        cd = get<2>(n);

        if(cd != dist[cr][cc])
            continue;


        cd += graph[cr][cc];
        nc = cc+1;

        nr = cr+1;
        if(nr < r) {
            nd = cd + 60;
            if(dist[nr][nc] > nd) {
                dist[nr][nc] = nd;
                tuple<int,int,long> nt(nr,nc,nd);
                q.push(nt);
            }
        }

        nr = cr;
        nd = cd + 30;
        if(dist[nr][nc] > nd) {
            dist[nr][nc] = nd;
            tuple<int,int,long> nt(nr,nc,nd);
            q.push(nt);
        }


        nr = cr-1;
        if(nr >= 0) {
            nd = cd + 20;
            if(dist[nr][nc] > nd) {
                dist[nr][nc] = nd;
                tuple<int,int,long> nt(nr,nc,nd);
                q.push(nt);
            }
        }


    }


    return dist[0][c];

}




int main() {

    int tc;
    scanf("%d",&tc);
    for(int v = 0; v < tc; v++) {
        scanf("%d",&x);
        c = x/100;
        for(int i = r-1; i >= 0; i--) {
            for(int j = 0;j < c; j++) {
                scanf("%d",&graph[i][j]);
                graph[i][j] = -graph[i][j];
            }
        }



        long ans = dijkstra();
        printf("%ld\n\n", ans);

    }

    return 0;
}






