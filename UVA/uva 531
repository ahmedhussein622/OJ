import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;

public class Main {

	static String fileName = "input.txt";
	static int n,m;
	static String s1,s2;
	static String a[],b[];
	static int big = -100000000;
	static int dp[][];
	static char op[][];
	
	public static void main(String[] args) throws Exception {
		
//		BufferedReader in = new BufferedReader(new FileReader(new File(fileName)));
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		
		dp = new int[3100][3100];
		op = new char[3100][3100];
		result = new ArrayList<>();
		
		
		StringBuffer b1 = new StringBuffer();
		StringBuffer b2 = new StringBuffer();
		
		s1 = in.readLine();
		
		while(s1 != null) {
			
			b1 = new StringBuffer();
			b1.append("a ");
			b1.append(s1);
			
			s1 = in.readLine();
			while(s1.charAt(0) != '#') {
				b1.append(" ");
				b1.append(s1);
				s1 = in.readLine();
			}
			
			
			
			b2 = new StringBuffer();
			b2.append("a ");
			s2 = in.readLine();
			b2.append(s2);
			s2 = in.readLine();
			while(s2.charAt(0) != '#') {
				b2.append(" ");
				b2.append(s2);
				s2 = in.readLine();
			}
			
			
			s1 = b1.toString();
			s2 = b2.toString();
			
			a = s1.split(" ");
			b = s2.split(" ");
			n = a.length-1;
			m = b.length-1;
			
			
			
			solve();
			result.clear();
			build(n,m);
			for(int i = result.size()-1; i > 0; i--) {
				System.out.print(result.get(i)+" ");
			}
			System.out.println(result.get(0));
			
			s1 = in.readLine();
			
		}
		
		
		in.close();
	}
	
	static ArrayList<String> result;
	
	static void build(int i, int j) {
		
		if(i == 0 || j == 0)
			return ;
		
		if(op[i][j] == 'M') {
			result.add(a[i]);
			build(i-1,j-1);
		}
		else {
			if(op[i][j] == 'I')
				build(i-1,j);
			else
				build(i,j-1);
		}
	}

	
	static void solve() {
		
		int ans;
		for(int i = 1; i <= n;i++) {
			for(int j = 1; j <= m; j++) {
				ans = -1000000;
				
				if(a[i].compareTo(b[j]) == 0) {
					ans = 1+dp[i-1][j-1];
					op[i][j] = 'M';
				}
				
				if(ans < dp[i-1][j]) {
					ans = dp[i-1][j];
					op[i][j] = 'I';
				}
				
				if(ans < dp[i][j-1]) {
					ans = dp[i][j-1];
					op[i][j] = 'J';
				}
				
				
				dp[i][j] = ans;
			}
			
		}
		
		
	}
	
	
	
	
	
	
}

