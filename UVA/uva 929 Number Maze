import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

import javax.swing.text.TabExpander;



public class Main {
	
	public static int map[][] = new int[1000][1000];
	public static int visited[][] = new int[1000][1000];
	static int m,n;
	
	
	public static void main(String[] args) throws Exception {

//		BufferedReader in = new BufferedReader(new FileReader("test.txt"));
//		BufferedWriter out = new BufferedWriter(new FileWriter(new File("output.txt")));
		
		
		
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

		
		int testCase = Integer.parseInt(in.readLine());
		String input;
		StringTokenizer token;
		int i,j;
		
		while(testCase-- != 0) {
			
			token = new StringTokenizer(in.readLine());
			n = Integer.parseInt(token.nextToken());
			token = new StringTokenizer(in.readLine());
			m = Integer.parseInt(token.nextToken());
			
			// build the map
			for(i = 0; i < n; i++) {
				input = in.readLine();
				token = new StringTokenizer(input);
				for(j = 0 ; j < m;j++) {
					map[i][j] = Integer.parseInt(token.nextToken());
				}
			}// end of building
			
			out.println(Dijkstra());
//			out.write(Dijkstra()+"\n");
			
		}// end of while
		
		

		in.close();
		out.flush();
//		Tester.check();
	}
	
	static int dx[] = {1,-1,0,0};
	static int dy[] = {0,0,1,-1};
	
	static int Dijkstra() {
		
		
		int i,j;
		int a,b;
		for(i = 0 ; i < n; i++)
			for(j = 0; j < m; j++)
				visited[i][j] = 0;
		
		queue.clear();
		queue.add(new MyPoint(0, 0, map[0][0]));
		visited[0][0] = 1;
		
		MyPoint u = null;
		
		while(!queue.isEmpty()) {
			
			u = queue.poll();
			
			if(u.x == m-1 && u.y == n-1) {
				break;
			}
			for(i = 0 ; i < 4; i++) {
				a = u.x+dx[i];
				b = u.y+dy[i];
				
				if(a >= 0 && a < m && b >= 0 && b < n && visited[b][a] == 0) {
					visited[b][a] = 1;
					queue.add(new MyPoint(a, b, u.priority+map[b][a]));
				}
				
			}// end of for
			
		}// end of while
		
		return u.priority;
	}
	
// queue setup
/////////////////////////////////////////////////////////////////////////////////////////////	
	
	static Comparator<MyPoint> compare = new Comparator<MyPoint>() {

		@Override
		public int compare(MyPoint o1, MyPoint o2) {
			return o1.priority - o2.priority;
		}
		
	};
	static PriorityQueue<MyPoint> queue = new PriorityQueue<MyPoint>(1,compare);
	
	static class MyPoint {
		int x,y,priority;
		public MyPoint(int xx , int yy, int pr) {
			x = xx;
			y = yy;
			priority = pr;
		}
	}
	
	
	
}
